#!/usr/bin/env python
"""
Created on 2019/11/22

Des:  https://leetcode.com/problems/number-of-islands/

https://leetcode.com/explore/learn/card/queue-stack/231/practical-application-queue/1374/

"""
from queue import Queue
from typing import List


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0
        islands = 0
        height = len(grid)
        length = len(grid[0])
        q = Queue(height * length)
        visited = set()
        for h in range(height):
            for l in range(length):
                if grid[h][l] == '1' and (h, l) not in visited:
                    q.put((h, l))
                    visited.add((h, l))
                    while not q.empty():
                        (th, tl) = q.get()
                        # Up
                        if th > 0 and grid[th - 1][tl] == '1' and (th - 1, tl) not in visited:
                            q.put((th - 1, tl))
                            visited.add((th - 1, tl))
                        # Left
                        if tl > 0 and grid[th][tl - 1] == '1' and (th, tl - 1) not in visited:
                            q.put((th, tl - 1))
                            visited.add((th, tl - 1))
                        # Down
                        if th < height - 1 and grid[th + 1][tl] == '1' and (th + 1, tl) not in visited:
                            q.put((th + 1, tl))
                            visited.add((th + 1, tl))
                        # Right
                        if tl < length - 1 and grid[th][tl + 1] == '1' and (th, tl + 1) not in visited:
                            q.put((th, tl + 1))
                            visited.add((th, tl + 1))
                    islands += 1
        return islands


def test():
    land = [
        ['1', '1', '1', '1', '0'],
        ['1', '1', '0', '1', '0'],
        ['1', '1', '0', '0', '0'],
        ['0', '0', '0', '0', '0']
    ]
    assert Solution().numIslands(land) == 1

    land = [
        ['1', '1', '0', '0', '0'],
        ['1', '1', '0', '0', '0'],
        ['0', '0', '1', '0', '0'],
        ['0', '0', '0', '1', '1'],
    ]
    assert Solution().numIslands(land) == 3

    assert Solution().numIslands([]) == 0

    land = [["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1"],
            ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0"],
            ["1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1"],
            ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1"],
            ["1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "0"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
            ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"]
            ]
    Solution().numIslands(land)


if __name__ == '__main__':
    test()
